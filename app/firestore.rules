rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth.token.admin;
    }
    function isNonAnonymous() {
      return request.auth.token.firebase.sign_in_provider != 'anonymous';
    }
    match /{document=**} {
      allow read, write: if false;
    }
    function isAuthor() {
      return request.auth.uid != null && request.auth.uid == resource.data.a;
    }
    function authorSetCorrectly() {
      return request.auth.uid != null && request.auth.uid == request.resource.data.a;
    }
    function validCrossword() {
      return (request.resource.data.g.size() == (request.resource.data.w * request.resource.data.h))
        && (request.resource.data.ac.size() == request.resource.data.an.size())
        && (request.resource.data.dc.size() == request.resource.data.dn.size());
    }
    function arrayChangedByOnly(a, b, c) {
      let aSet = a.toSet();
      let bSet = b.toSet();
      let aDiff = aSet.difference(bSet);
      let bDiff = bSet.difference(aSet);
      return aDiff.union(bDiff).hasOnly([c]);
    }
    match /cp/{username} {
      allow get: if true;
      allow list: if true;
      allow update: if isAdmin();
      allow update: if isNonAnonymous()
        && request.auth.uid != null && request.auth.uid == request.resource.data.u
        && request.resource.data.i.lower() == username
        && request.resource.data.u == resource.data.u
        && request.resource.data.m == true
        && request.resource.data.n is string && request.resource.data.n.size() > 0
        && request.resource.data.t == request.time;
      allow create: if isNonAnonymous()
        && request.resource.data.i.lower() == username
        && username.size() >= 3
        && username.size() <= 20
        && !username.matches('.*admin.*')
        && !username.matches('.*crosshare.*')
        && username.matches('\\w+')
        && request.auth.uid != null && request.auth.uid == request.resource.data.u
        && request.resource.data.m == true
        && request.resource.data.n is string && request.resource.data.n.size() > 0
        && request.resource.data.t == request.time;
    }
    match /donations/donations {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    match /mail/{messageId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    match /c/{crosswordId} {
      allow get: if true;

      allow list: if isAdmin() || isAuthor();
      allow list: if request.query.limit <= 30;

      allow update: if isAdmin();

      allow update: if isNonAnonymous() && authorSetCorrectly()
        && validCrossword()
        && request.resource.data.a == resource.data.a
        && request.resource.data.c == resource.data.c
        && request.resource.data.m == resource.data.m
        && request.resource.data.p == resource.data.p
        && request.resource.data.w == resource.data.w
        && request.resource.data.h == resource.data.h
        && (!request.resource.data.keys().hasAny(["tg_u"]) || request.resource.data.tg_u.size() < 6)
        && (!request.resource.data.keys().hasAny(["tg_a"]) || request.resource.data.tg_a == resource.data.tg_a)
        && (!request.resource.data.keys().hasAny(["cs"]) || request.resource.data.cs == resource.data.cs)
        && (!request.resource.data.keys().hasAny(["dmd"]) || request.resource.data.dmd == resource.data.dmd)
        && (!request.resource.data.keys().hasAny(["f"]) || request.resource.data.f == resource.data.f)
        && (!request.resource.data.keys().hasAny(["hs"]) || request.resource.data.hs == resource.data.hs)
        && (!request.resource.data.keys().hasAny(["s"]) || request.resource.data.s == resource.data.s)
        && request.resource.data.g == resource.data.g;

      allow create: if isNonAnonymous() && authorSetCorrectly()
        && validCrossword()
        && (!request.resource.data.keys().hasAny(["cs"]) || request.resource.data.cs.size() == 0)
        && request.resource.data.m == false
        && (!request.resource.data.keys().hasAny(["f"]) || request.resource.data.f == false)
        && (!request.resource.data.keys().hasAny(["dmd"]))
        && (!request.resource.data.keys().hasAny(["tg_a"]))
        && (!request.resource.data.keys().hasAny(["tg_u"]) || request.resource.data.tg_u.size() < 6)
        && request.resource.data.c == null
        && request.time >= request.resource.data.p;
    }
    match /uc/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }
    match /up/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }
    match /prefs/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if isAdmin() || request.auth.uid == userId;
    }
    match /cs/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
    }
    match /p/{playId} {
      allow read: if request.auth.uid != null
        && (resource == null || request.auth.uid == resource.data.u);

      allow write: if request.auth.uid != null
        && request.auth.uid == request.resource.data.u
        && playId == (request.resource.data.c + '-' + request.resource.data.u);

      allow delete: if request.auth.uid != null
        && request.auth.uid == resource.data.u;
    }
    match /s/{crosswordId} {
      allow read: if isAdmin() || request.auth.uid == resource.data.a;
    }
    match /n/{notificationId} {
      allow update: if request.auth.uid == resource.data.u
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['r']);

      allow read: if isAdmin() || request.auth.uid == resource.data.u;
    }
    match /followers/{userId} {
      allow update: if request.auth.uid != null
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['f'])
        && arrayChangedByOnly(request.resource.data.f, resource.data.f, request.auth.uid);

      allow create: if request.auth.uid != null
        && request.resource.data.keys().hasOnly(['f'])
        && request.resource.data.f.hasOnly([request.auth.uid]);
    }
    // Embedded puzzle options
    match /em/{userId} {
      allow read: if true;
      allow write: if request.auth.uid != null
        && isNonAnonymous()
        && request.auth.uid == userId;
    }
    match /ds/{dateString} {
      allow read: if isAdmin();
    }
    match /categories/{category} {
      allow get: if true;
      allow write: if isAdmin();
    }
    match /cfm/{commentId} {
      allow write: if isAdmin();
      allow write: if request.auth.uid != null
        && isNonAnonymous()
        && request.auth.uid == request.resource.data.a
        && !request.resource.data.keys().hasAny(["approved"])
        && (
          !request.resource.data.keys().hasAny(["un"]) ||
          get(/databases/$(database)/documents/cp/$(request.resource.data.un.lower())).data.u == request.auth.uid
        );
      allow read: if isAdmin();
      allow delete: if isAdmin();
    }
    match /cr/{reportId} {
      allow write: if isAdmin();
      allow write: if request.auth.uid != null
        && isNonAnonymous()
        && request.auth.uid == request.resource.data.u
        && reportId == (request.resource.data.cid + '-' + request.resource.data.u);

      allow read: if isAdmin();
      allow delete: if isAdmin();
    }
    match /a/{articleId} {
      allow write: if isAdmin();
      allow read: if isAdmin();
    }
    match /automoderated/{id} {
      allow write: if isAdmin();
      allow read: if isAdmin();
    }
    match /settings/tags {
      allow read: if true;
    }
  }
}
